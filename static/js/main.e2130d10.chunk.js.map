{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","selectedTodo","onSelectTodo","id","title","completed","isSelected","className","cn","type","onClick","TodoList","todos","map","TodoFilter","onSelectFiltering","onSearching","inputRef","useRef","onChange","event","target","value","placeholder","ref","current","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onCloseModal","useState","userFromServer","setUserFromServer","isLoading","setIsLoading","useEffect","userId","finally","href","name","App","todosFromServer","setTodosFromServer","visibleTodos","setVisibleTodos","filterQuery","setFilterQuery","searchQuery","setSearchQuery","setSelectedTodo","isShownModal","setIsShownModal","isReadyToShowTodos","selectTodo","useCallback","closeModal","selectFilterQuery","filterBy","selectSearchQuery","searchBy","preparedTodos","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2130d10.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  selectedTodo: Todo | null,\n  onSelectTodo: (todo: Todo) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  selectedTodo,\n  onSelectTodo,\n}) => {\n  const { id, title, completed } = todo;\n  const isSelected = selectedTodo?.id === todo?.id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n      {\n        completed\n          ? (\n            <td className=\"is-vcentered\">\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </td>\n          )\n          : (\n            <td className=\"is-vcentered\" />\n          )\n      }\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i\n              className={cn('far', {\n                'fa-eye': !isSelected,\n                'fa-eye-slash': isSelected,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  onSelectTodo: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onSelectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {\n        todos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            selectedTodo={selectedTodo}\n            onSelectTodo={onSelectTodo}\n          />\n        ))\n      }\n    </tbody>\n  </table>\n);\n","import { useRef } from 'react';\nimport { FilteringQuery } from '../../types/FilteringQuery';\n\ntype Props = {\n  onSelectFiltering: (filterBy: FilteringQuery) => void,\n  onSearching: (searchBy: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSelectFiltering,\n  onSearching,\n}) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              onSelectFiltering(event.target.value as FilteringQuery);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(event) => onSearching(event.target.value)}\n          ref={inputRef}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {inputRef.current && inputRef.current.value.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                if (inputRef.current) {\n                  inputRef.current.value = '';\n                }\n\n                onSearching('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo,\n  onCloseModal: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onCloseModal }) => {\n  const [userFromServer, setUserFromServer] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(setUserFromServer)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                selectedTodo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {userFromServer?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilteringQuery } from './types/FilteringQuery';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[] | null>(null);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[] | null>(null);\n\n  const [filterQuery, setFilterQuery] = useState<FilteringQuery>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isShownModal, setIsShownModal] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isReadyToShowTodos = !isLoading && visibleTodos;\n\n  const selectTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const closeModal = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const selectFilterQuery = useCallback((filterBy: FilteringQuery) => {\n    setFilterQuery(filterBy);\n  }, []);\n\n  const selectSearchQuery = useCallback((searchBy: string) => {\n    setSearchQuery(searchBy);\n  }, []);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodosFromServer)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      setIsShownModal(true);\n    } else {\n      setIsShownModal(false);\n    }\n  }, [selectedTodo]);\n\n  useEffect(() => {\n    if (!todosFromServer) {\n      return;\n    }\n\n    let preparedTodos: Todo[] = todosFromServer;\n\n    switch (filterQuery) {\n      case 'active':\n        preparedTodos = todosFromServer.filter(todo => !todo.completed);\n        break;\n      case 'completed':\n        preparedTodos = todosFromServer.filter(todo => todo.completed);\n        break;\n      case 'all':\n      default:\n        break;\n    }\n\n    if (searchQuery) {\n      preparedTodos = preparedTodos.filter(todo => {\n        return todo.title.toLowerCase().includes(searchQuery.toLowerCase());\n      });\n    }\n\n    setVisibleTodos(preparedTodos);\n  }, [filterQuery, searchQuery, todosFromServer]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelectFiltering={selectFilterQuery}\n                onSearching={selectSearchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                isLoading\n                  && <Loader />\n              }\n\n              {\n                isReadyToShowTodos && visibleTodos.length === 0\n                  && <p>There are no todos to show!</p>\n              }\n\n              {\n                isReadyToShowTodos && visibleTodos.length > 0\n                  && (\n                    <TodoList\n                      todos={visibleTodos}\n                      selectedTodo={selectedTodo}\n                      onSelectTodo={selectTodo}\n                    />\n                  )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {\n        isShownModal && selectedTodo\n          && <TodoModal selectedTodo={selectedTodo} onCloseModal={closeModal} />\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}